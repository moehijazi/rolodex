{"version":3,"sources":["Components/Card/Card.jsx","Components/CardList/CardList.jsx","Components/SearchBox/SearchBox.jsx","Components/CreatureSelector/CreatureSelector.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","set","name","email","CardList","monsters","map","Card_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","CreatureSelector","value","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchField","_this2","fetch","then","response","json","users","setState","_this3","_this$state","filteredMonsters","filter","toLowerCase","includes","SearchBox_SearchBox","e","target","CreatureSelector_CreatureSelector","CardList_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,qBAAO,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,YAAAF,OAAqDP,EAAMU,IAA3D,mBACtBT,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,QAAQG,MACnBV,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQI,UCHjBC,EAAW,SAAAb,GAEpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,EAAMc,SAASC,IAAI,SAAAP,GAAO,OAC3BP,EAAAC,EAAAC,cAACa,EAAD,CAAMC,IAAKT,EAAQC,GAAID,QAASA,EAASE,IAAKV,EAAMU,UCNnDQ,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAYC,EAAdF,EAAcE,aAAd,OACrBpB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAASkB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCFnEG,EAAmB,SAAAxB,GAAK,OACjCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACTH,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,UAAQoB,SAAUvB,EAAMqB,cACtBpB,EAAAC,EAAAC,cAAA,UAAQsB,MAAM,KAAd,UACAxB,EAAAC,EAAAC,cAAA,UAAQsB,MAAM,KAAd,YACAxB,EAAAC,EAAAC,cAAA,UAAQsB,MAAM,KAAd,QACAxB,EAAAC,EAAAC,cAAA,UAAQsB,MAAM,KAAd,aCmCGC,cApCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAO,CACVpB,SAAU,GACVqB,YAAa,GACbzB,IAAK,GANIiB,mFAUM,IAAAS,EAAAN,KACjBO,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKM,SAAS,CAAC5B,SAAU2B,uCAGjC,IAAAE,EAAAb,KAAAc,EAEyBd,KAAKI,MAA9BpB,EAFA8B,EAEA9B,SAAUqB,EAFVS,EAEUT,YACXU,EAAmB/B,EAASgC,OAAO,SAAAtC,GAAO,OAC9CA,EAAQG,KAAKoC,cAAcC,SAASb,EAAYY,iBAKlD,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAC8C,EAAD,CAAW7B,YAAY,kBAAkBC,aAAc,SAAA6B,GAAC,OAAIP,EAAKD,SAAS,CAACP,YAAae,EAAEC,OAAO1B,WACjGxB,EAAAC,EAAAC,cAACiD,EAAD,CAAkB/B,aAAc,SAAA6B,GAAIP,EAAKD,SAAS,CAAChC,IAAKwC,EAAEC,OAAO1B,WACjExB,EAAAC,EAAAC,cAACkD,EAAD,CAAUvC,SAAU+B,EAAkBnC,IAAKoB,KAAKI,MAAMxB,cAhC9C4C,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.047352e6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n        <div className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set${props.set}&size=180x180`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n","import React from 'react';\r\nimport './CardListStyles.css';\r\nimport {Card} from '../Card/Card';\r\n\r\nexport const CardList = props => {\r\n\r\n    return(\r\n        <div className='card-list'>\r\n            {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} set={props.set} />\r\n          ))}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange})  => (\r\n    <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    )\r\n","import React from 'react';\r\n\r\nexport const CreatureSelector = props  => (\r\n    <div className='creature' >\r\n          <p>Pick your preffered Creature:</p>\r\n          <select onChange={props.handleChange}>\r\n            <option value=\"1\">Robots</option>\r\n            <option value=\"2\">Monsters</option>\r\n            <option value=\"4\">Cats</option>\r\n            <option value=\"5\">Humans</option>\r\n          </select>\r\n    </div>\r\n    )","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from './Components/CardList/CardList';\nimport {SearchBox} from './Components/SearchBox/SearchBox';\nimport {CreatureSelector} from './Components/CreatureSelector/CreatureSelector';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state ={\n      monsters: [],\n      searchField: '',\n      set: 1,\n    };\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  render() {\n\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    \n\n\n    return (\n      <div className=\"App\">\n          <h1> Rolodex</h1>\n          <SearchBox placeholder='Search Monsters' handleChange={e => this.setState({searchField: e.target.value})} />\n          <CreatureSelector handleChange={e=>{this.setState({set: e.target.value}  );}} />\n          <CardList monsters={filteredMonsters} set={this.state.set} /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}